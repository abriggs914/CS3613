#lang plait

(define-type WAE
  [With (id : Symbol) (bound-expr : WAE) (body : WAE)]
  [Add (left : WAE) (right : WAE)]
  [Id (id : Symbol)]
  [Num (n : Number)])

(define (find-ids expr)
  (type-case WAE expr
    [(With id exp1 exp2) (append (list id) (find-ids exp2))]
    [(Add left right) (append (find-ids left) (find-ids right))]
    [else empty]))

(test (find-ids (Num 3)) '())
(test (find-ids (Id 'x)) '())
(test (find-ids (With 'x (Num 3) (Id 'x))) '(x))
(test (find-ids (Add
                 (With 'x (Num 3) (Id 'x))
                 (With 'y (Num 3) (Id 'y)))) '(x y))
(test (find-ids (Add
                 (With 'x (Num 3) (Id 'x))
                 (With 'x (Num 3) (Id 'y)))) '(x x))


(define (alpha f g)
  (lambda (x)
    (g (f x))))

(has-type  alpha : (('a -> 'b) ('b -> 'c) -> ('a -> 'c)))

(test ((alpha add1 add1) 1) 3)
(test ((alpha add1 to-string) 42) "43")