#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1227 0 4 3 11 #"#lang plait"
0 0 4 3 1 #" "
0 0 4 3 9 #"#:untyped"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 23 #";(print-only-errors #t)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 7 #"require"
0 0 4 3 2 #" ("
0 0 4 3 8 #"typed-in"
0 0 4 3 1 #" "
0 0 4 3 11 #"racket/base"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                   ["
0 0 4 3 7 #"number?"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 1 #"'"
0 0 4 3 1 #"a"
0 0 4 3 1 #" "
0 0 4 3 2 #"->"
0 0 4 3 1 #" "
0 0 4 3 7 #"Boolean"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                   ["
0 0 4 3 10 #"procedure?"
0 0 4 3 1 #" "
0 0 4 3 1 #":"
0 0 4 3 2 #" ("
0 0 4 3 1 #"'"
0 0 4 3 1 #"a"
0 0 4 3 1 #" "
0 0 4 3 2 #"->"
0 0 4 3 1 #" "
0 0 4 3 7 #"Boolean"
0 0 4 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 6 #"define"
0 0 4 3 2 #" ("
0 0 4 3 10 #"acker-orig"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"cond"
0 0 4 3 3 #" [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 3 #") ("
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"        [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 3 #") ("
0 0 4 3 10 #"acker-orig"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"        ["
0 0 4 3 4 #"else"
0 0 4 3 7 #"      ("
0 0 4 3 10 #"acker-orig"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                              ("
0 0 4 3 10 #"acker-orig"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 10 #"acker-orig"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 2 #"61"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 9 #"ackermann"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ("
0 0 4 3 10 #"lambda/rec"
0 0 4 3 1 #" "
0 0 4 3 9 #"ackermann"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                   ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"m"
0 0 4 3 2 #") "
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                     ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 4 #"cond"
0 0 4 3 3 #" [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 3 #") ("
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                             [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 4 #") (("
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 3 #")) "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                             ["
0 0 4 3 4 #"else"
0 0 4 3 3 #" (("
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 49 #"                                               (("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 3 #") ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 10 #")))]))))])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ("
0 0 4 3 4 #"test"
0 0 4 3 3 #" (("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 2 #"61"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ("
0 0 4 3 4 #"test"
0 0 4 3 3 #" (("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 1 #"4"
0 0 4 3 2 #") "
0 0 4 3 3 #"125"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"#|"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"(let* ([ackermann2"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"        (lambda/rec ackermann2"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                    (lambda (m n)"
0 0 4 29 1 #"\n"
0 0 4 3 47 #"                      (cond [(zero? m) (+ n 1)]"
0 0 4 29 1 #"\n"
0 0 4 3 62
#"                            [(zero? n) (ackermann2 (- m 1) 1)]"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                            [else (ackermann2 (- m 1)"
0 0 4 29 1 #"\n"
0 0 4 3 75
(
 #"                                              (ackermann2 m (- n 1))"
 #")])))])"
) 0 0 4 29 1 #"\n"
0 0 4 3 6 #"(begin"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"  (test (ackermann2 1 0) 0)"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"  (test (ackermann2 3 3) 61)"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"  (test (ackermann2 3 4) 125)))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"|#"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 4 #"let*"
0 0 4 3 3 #" (["
0 0 4 3 9 #"make-fact"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"         ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 4 #"self"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"             ("
0 0 4 3 3 #"let"
0 0 4 3 4 #" ([ "
0 0 4 3 4 #"fact"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                     ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"n"
0 0 4 3 5 #") (( "
0 0 4 3 4 #"self"
0 0 4 3 1 #" "
0 0 4 3 4 #"self"
0 0 4 3 2 #") "
0 0 4 3 1 #"n"
0 0 4 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"               ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                 ("
0 0 4 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                 ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                 ("
0 0 4 3 2 #"if"
0 0 4 3 2 #" ("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 4 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                     ("
0 0 4 3 1 #"*"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #" ("
0 0 4 3 4 #"fact"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 4 3 1 #"1"
0 0 4 3 9 #"))))))))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ["
0 0 4 3 4 #"fact"
0 0 4 3 3 #" ( "
0 0 4 3 9 #"make-fact"
0 0 4 3 1 #" "
0 0 4 3 9 #"make-fact"
0 0 4 3 4 #" )])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"fact"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 4 #"let*"
0 0 4 3 3 #" (["
0 0 4 3 11 #"ackermann-2"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"        ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 4 #"self"
0 0 4 3 2 #") "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"          ("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 11 #"ackermann-2"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                 ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 4 #") (("
0 0 4 3 4 #"self"
0 0 4 3 1 #" "
0 0 4 3 4 #"self"
0 0 4 3 2 #") "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"            ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"              ("
0 0 4 3 4 #"cond"
0 0 4 3 3 #" [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 3 #") ("
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                    [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 3 #") ("
0 0 4 3 11 #"ackermann-2"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                    ["
0 0 4 3 4 #"else"
0 0 4 3 2 #" ("
0 0 4 3 11 #"ackermann-2"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                      ("
0 0 4 3 11 #"ackermann-2"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 9 #")))]))))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ["
0 0 4 3 10 #"ackermann2"
0 0 4 3 2 #" ("
0 0 4 3 11 #"ackermann-2"
0 0 4 3 1 #" "
0 0 4 3 11 #"ackermann-2"
0 0 4 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 10 #"ackermann2"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #" "
0 0 4 3 1 #"0"
0 0 4 3 2 #") "
0 0 4 3 1 #"2"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 10 #"ackermann2"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 2 #"61"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 4 #"let*"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"    (["
0 0 4 3 4 #"fact"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"      ("
0 0 4 3 10 #"lambda/rec"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 4 3 4 #"fact"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"         ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"           ("
0 0 4 3 2 #"if"
0 0 4 3 2 #" ("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 4 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"               ("
0 0 4 3 1 #"*"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #" ("
0 0 4 3 4 #"fact"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 7 #"))))))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"     ["
0 0 4 3 5 #"fact0"
0 0 4 3 2 #" ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"y"
0 0 4 3 3 #") ("
0 0 4 3 4 #"fact"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 5 #"fact0"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #") "
0 0 4 3 3 #"120"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 4 #"let*"
0 0 4 3 3 #" (["
0 0 4 3 9 #"ackermann"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"        ("
0 0 4 3 10 #"lambda/rec"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 3 9 #"ackermann"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"         ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 4 #"self"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"           ("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 4 #") (("
0 0 4 3 4 #"self"
0 0 4 3 1 #" "
0 0 4 3 4 #"self"
0 0 4 3 2 #") "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"y"
0 0 4 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"             ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"               ("
0 0 4 3 4 #"cond"
0 0 4 3 3 #" [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 3 #") ("
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                     [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 3 #") ("
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                     ["
0 0 4 3 4 #"else"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                      ("
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                 ("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 10 #")))])))))]"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ["
0 0 4 3 10 #"ackermann2"
0 0 4 3 2 #" ("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 9 #"ackermann"
0 0 4 3 3 #")])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 10 #"ackermann2"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 2 #"61"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 18 #"define-syntax-rule"
0 0 4 3 2 #" ("
0 0 4 3 10 #"define/fun"
0 0 4 3 2 #" ("
0 0 4 3 2 #"id"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 2 #") "
0 0 4 3 4 #"body"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 6 #"define"
0 0 4 3 1 #" "
0 0 4 3 2 #"id"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 2 #") "
0 0 4 3 4 #"body"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 18 #"define-syntax-rule"
0 0 4 3 2 #" ("
0 0 4 3 10 #"lambda/rec"
0 0 4 3 1 #" "
0 0 4 3 3 #"fun"
0 0 4 3 1 #" "
0 0 4 3 3 #"def"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"  (("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"f"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"     (("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 1 #"f"
0 0 4 3 2 #" ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"n"
0 0 4 3 4 #") (("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 2 #") "
0 0 4 3 1 #"n"
0 0 4 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"      ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"x"
0 0 4 3 3 #") ("
0 0 4 3 1 #"f"
0 0 4 3 2 #" ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"n"
0 0 4 3 4 #") (("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 2 #") "
0 0 4 3 1 #"n"
0 0 4 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"   ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 3 #"fun"
0 0 4 3 2 #") "
0 0 4 3 3 #"def"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"#|(define-syntax-rule (lambda/rec fun def)"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"  ((lambda (f)"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"     ((lambda (x) (f (lambda (n) "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"     (begin"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"       ;(display \"ndsr \")"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"       ;(display n)"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"       ((x x) n)))))"
0 0 4 29 1 #"\n"
0 0 4 3 47 #"      (lambda (x) (f (lambda (n) ((x x) n))))))"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"   (lambda (fun) def)))|#"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 18 #"define-syntax-rule"
0 0 4 3 2 #" ("
0 0 4 3 11 #"lambda/rec*"
0 0 4 3 2 #" ("
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 2 #") "
0 0 4 3 1 #"E"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 1 #"g"
0 0 4 3 3 #"  ("
0 0 4 3 10 #"lambda/rec"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                        ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 5 #"bogus"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 29 #"                            ("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 1 #"f"
0 0 4 3 2 #" ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 4 #") (("
0 0 4 3 1 #"f"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 2 #") "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                              ("
0 0 4 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 4 3 24 #";[(equal? f f) ( x ...)]"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                [("
0 0 4 3 7 #"number?"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 3 #") ("
0 0 4 3 5 #"begin"
0 0 4 3 2 #" ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 5 #"\"F: \""
0 0 4 3 3 #") ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 1 #"f"
0 0 4 3 2 #") "
0 0 4 3 1 #"f"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                ["
0 0 4 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                 ("
0 0 4 3 6 #"lambda"
0 0 4 3 2 #" ("
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                   ("
0 0 4 3 3 #"let"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 19 #"; ([a (f x ...)]) X"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 17 #"; ([a (E x ...)])"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 21 #"; ([a ((f f) x ...)])"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 21 #"; ([a ((f E) x ...)])"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 23 #"; ([a (f (E x ...))]) ~"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 27 #"; ([a ((f f) (E x ...))]) X"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                       (["
0 0 4 3 1 #"a"
0 0 4 3 2 #" ("
0 0 4 3 1 #"E"
0 0 4 3 2 #" ("
0 0 4 3 1 #"E"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 4 #"))])"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 4 3 17 #"; ([a (f x ...)])"
0 0 4 29 1 #"\n"
0 0 4 3 36 #"                                   ("
0 0 4 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                     ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 7 #"\"\\ta: \""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                     ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 1 #"a"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                     ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 7 #"\" ___ \""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                     ("
0 0 4 3 7 #"display"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                     ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 7 #"\" ___ \""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                     ("
0 0 4 3 7 #"display"
0 0 4 3 2 #" ("
0 0 4 3 6 #"length"
0 0 4 3 2 #" ("
0 0 4 3 4 #"list"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 40 #"                                       ("
0 0 4 3 1 #"E"
0 0 4 3 1 #" "
0 0 4 3 1 #"x"
0 0 4 3 1 #" "
0 0 4 3 3 #"..."
0 0 4 3 11 #"))))]))))])"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 3 16 #";(lambda (bogus)"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 4 3 41 #";  (lambda (x ...) ((f f) (E x ...)))))])"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 4 3 15 #";(lambda (self)"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 4 3 54 #";  (let ([ackermann (lambda (m n) ((self self) m n))])"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 4 3 17 #"#|(lambda (x ...)"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"                            ;(E x ...))))])"
0 0 4 29 1 #"\n"
0 0 4 3 43 #"                            ;(E x ...))))])"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                            (begin "
0 0 4 29 1 #"\n"
0 0 4 3 54 #"                              (display \"\\n\\tx ...: \") "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                              (display (list x ...))"
0 0 4 29 1 #"\n"
0 0 4 3 55
#"                              (display \"\\n\\tlength: \") "
0 0 4 29 1 #"\n"
0 0 4 3 61
#"                              (display (length (list x ...)))"
0 0 4 29 1 #"\n"
0 0 4 3 64
#"                              (lambda (y) (f (E x ...)))))))])|#"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 4 3 6 #";(cond"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 4 3 45 #"; [(< 1 (length (list x ...))) ((f E) x ...)]"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 4 3 30 #";(foldl (lambda (y acc) (begin"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 4 3 64
#";        (display (f y)) (set! acc ((f E) y)))) 0 (list x ...))]"
0 0 4 29 1 #"\n"
0 0 4 3 32 #"                                "
0 0 4 3 43 #";[else ((f (first (list x ...))) E)])))))])"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 4 3 29 #"#|;    (foldl (lambda (y acc)"
0 0 4 29 1 #"\n"
0 0 4 3 45 #"                                       (begin"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 4 3 33 #"                      (display y)"
0 0 4 29 1 #"\n"
0 0 4 3 59
#"                                         (set! acc (E y))))"
0 0 4 29 1 #"\n"
0 0 4 3 60
#"                                     0 (list x ...))))))])|#"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"    ("
0 0 4 3 1 #"g"
0 0 4 3 1 #" "
0 0 4 3 2 #"#f"
0 0 4 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 9 #"ackermann"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ("
0 0 4 3 11 #"lambda/rec*"
0 0 4 3 3 #"  ("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                     ("
0 0 4 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 8 #"\"\\tmA: \""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 10 #"\"\\n\\tnA: \""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 4 #"\"\\n\""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                       ("
0 0 4 3 4 #"cond"
0 0 4 3 3 #" [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 3 #") ("
0 0 4 3 1 #"+"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                             [("
0 0 4 3 5 #"zero?"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 3 #") ("
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 2 #") "
0 0 4 3 1 #"1"
0 0 4 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                             ["
0 0 4 3 4 #"else"
0 0 4 3 7 #"      ("
0 0 4 3 9 #"ackermann"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                   ("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"m"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 9 #")))])))])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 9 #"ackermann"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 1 #" "
0 0 4 3 1 #"3"
0 0 4 3 2 #") "
0 0 4 3 2 #"61"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 1 #"("
0 0 4 3 3 #"let"
0 0 4 3 3 #" (["
0 0 4 3 4 #"fact"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"       ("
0 0 4 3 11 #"lambda/rec*"
0 0 4 3 2 #" ("
0 0 4 3 4 #"fact"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                    ("
0 0 4 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                      ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 9 #"\"\\n\\tn: \""
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                      ("
0 0 4 3 7 #"display"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                      ("
0 0 4 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                        [("
0 0 4 3 1 #"="
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"0"
0 0 4 3 2 #") "
0 0 4 3 1 #"1"
0 0 4 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                        ["
0 0 4 3 4 #"else"
0 0 4 3 2 #" ("
0 0 4 3 1 #"*"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 2 #" ("
0 0 4 3 4 #"fact"
0 0 4 3 2 #" ("
0 0 4 3 1 #"-"
0 0 4 3 1 #" "
0 0 4 3 1 #"n"
0 0 4 3 1 #" "
0 0 4 3 1 #"1"
0 0 4 3 9 #")))])))])"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"  ("
0 0 4 3 4 #"test"
0 0 4 3 2 #" ("
0 0 4 3 4 #"fact"
0 0 4 3 1 #" "
0 0 4 3 1 #"5"
0 0 4 3 2 #") "
0 0 4 3 3 #"120"
0 0 4 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"#|(let"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 3 8 #"  ([fact"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"       (lambda/rec* (fact n)"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                    (begin"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                      (display \"\\n\\tn: \")"
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                      (display n)"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                    (lambda (n)"
0 0 4 29 1 #"\n"
0 0 4 3 37 #"                      (if (zero? n) 1"
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                          (* n (fact (- n 1)))))))])"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"  (test (fact 5) 120))|#"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 26 #";(test (ackermann2 1 0) 0)"
0 0 4 29 1 #"\n"
0 0 4 3 29 #";  (test (ackermann2 3 3) 61)"
0 0 4 29 1 #"\n"
0 0 4 3 30 #";  (test (ackermann2 3 4) 125)"
0 0 4 29 1 #"\n"
0 0 4 3 51 #";(define foo (curry (lambda (x y z) (list x y z))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 80
(
 #";You should also use lambda/rec* to define fact, and at least one mo"
 #"re recursive"
) 0 0 4 29 1 #"\n"
0 0 4 3 34 #";function with multiple arguments."
0           0
