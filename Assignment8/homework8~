#lang plait #:untyped

(define-syntax-rule (lambda/rec fun def)
  ((lambda (f)
     ((lambda (x) (f (lambda (n) ((x x) n))))
      (lambda (x) (f (lambda (n) ((x x) n))))))
   (lambda (fun) def)))

(define (acker-orig m n)
  (cond [(zero? m) (+ n 1)]
        [(zero? n) (acker-orig (- m 1) 1)]
        [else      (acker-orig (- m 1)
                              (acker-orig m (- n 1)))]))
(test (acker-orig 3 3) 61)

(let ([ackermann
       (lambda/rec ackermann
           (lambda (m n)
             (cond [(zero? m) (+ n 1)]
                   [(zero? n) (ackermann (- m 1) 1)]
                   [else      (ackermann (- m 1)
                                         (ackermann m (- n 1)))])))])
   (ackermann 3 3))

(let ([ackermann
       (lambda/rec ackermann
            (lambda (m)
              (lambda (n) 
                (cond [(zero? m) (+ n 1)]
                  [(zero? n) (ackermann (- m 1) 1)]
                  [else      (ackermann (- m 1)
                                        (ackermann m (- n 1)))]) n) m))])
  (test ((ackermann 3) 3) 61))

#|
(let ([ackermann
       (lambda/rec ackermann
           (curry
            (lambda (m n)
              (cond [(zero? m) (+ n 1)]
                  [(zero? n) (ackermann (- m 1) 1)]
                  [else      (ackermann (- m 1)
                                        (ackermann m (- n 1)))]) m n)))])
  (test ((ackermann 3) 3) 61))
|#

(define foo (curry (lambda (x y z) (list x y z))))