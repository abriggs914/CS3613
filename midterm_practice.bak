#lang plait

;Fill in a definition for the function sumtree so that it sums up all the numbers in a numtree.
(define-type numtree
  [leaf (n : Number)]
  [tree (l : numtree) (r : numtree)])

(define (sumtree t)
  (type-case numtree t
    [(leaf n) n]
    [(tree l r) (+ (sumtree l) (sumtree r))]))

(test (sumtree (tree
                (tree (leaf 3) (leaf 4))
                (tree (leaf 5) (tree (leaf 6) (leaf 7)))))
       25)

(define-type AE
  [Num  (val : Number)]
  [Add  (l : AE) (r : AE)]
  [Sub  (l : AE) (r : AE)]
  [Mul  (args : (Listof AE))]
  [Div  (l : AE) (r : AE)])

(define (eval expr)
  (type-case AE expr
    [(Num n) n]
    [(Add l r) (+ (eval l) (eval r))]
    [(Sub l r) (- (eval l) (eval r))]
    [(Mul args) (mul-helper args 1)]
    [(Div l r) (/ (eval l) (eval r))]))

(define (mul-helper args acc) (foldl (lambda (x) (* (eval x) acc)) acc args))

(test (eval (Mul (list (Add (Num 1) (Num 2)) (Num 3) (Num 4)))) 36)