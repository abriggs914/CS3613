#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 28 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1395 0 28 3 6 #"#lang "
0 0 49 3 5 #"plait"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"#"
0 0 49 3 1 #"|"
0 0 49 29 1 #"\n"
0 0 49 3 18 #" CS3613 Homework 4"
0 0 49 29 1 #"\n"
0 0 49 3 9 #" Feb.8/19"
0 0 49 29 1 #"\n"
0 0 49 3 13 #" Avery Briggs"
0 0 49 29 1 #"\n"
0 0 49 3 8 #" 3471065"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"|#"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 8 #" ArgPair"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"  [argpair (arg "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 8 #") (expr "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 4 #")]) "
0 0 49 3 25 #";(Symbol W*AE -> ArgPair)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 5 #" W*AE"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"  [Num  (val "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 3 #")] "
0 0 49 3 18 #"; (Number -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [Add  (l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 5 #") (r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 3 #")] "
0 0 49 3 21 #"; (W*AE W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [Sub  (l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 5 #") (r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 3 #")] "
0 0 49 3 21 #"; (W*AE W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [Mul  (l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 5 #") (r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 3 #")] "
0 0 49 3 21 #"; (W*AE W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"  [Div  (l "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 5 #") (r "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 3 #")] "
0 0 49 3 21 #"; (W*AE W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  [Id   (name "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 3 #")] "
0 0 49 3 18 #"; (Symbol -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 14 #"  [With (name "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 7 #") (val "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 8 #") (expr "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 3 #")] "
0 0 49 3 27 #";(Symbol W*AE W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"  [With* (argslist "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 1 #" "
0 0 49 3 7 #"ArgPair"
0 0 49 3 9 #")) (body "
0 0 49 3 1 #":"
0 0 49 3 2 #"  "
0 0 49 3 4 #"W*AE"
0 0 49 3 4 #")]) "
0 0 49 3 33 #"; ((Listof ArgPair) W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"; ('a -> 'b)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" (parse-error "
0 0 49 3 2 #"sx"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 7 #"(error "
0 0 50 3 1 #"'"
0 0 50 3 8 #"parse-sx"
0 0 50 3 48 #" (string-append \"parse error: \" (to-string sx)))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"; (S-Exp Number -> S-Exp)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (sx-ref "
0 0 49 3 2 #"sx"
0 0 49 3 1 #" "
0 0 49 3 1 #"n"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 8 #"list-ref"
0 0 50 3 20 #" (s-exp->list sx) n)"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 55 #"; ((Listof S-Exp) (Listof ArgPair) -> (Listof ArgPair))"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 13 #" (parse-args "
0 0 49 3 7 #"arglist"
0 0 49 3 1 #" "
0 0 49 3 3 #"acc"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 2 #"if"
0 0 50 3 17 #" (empty? arglist)"
0 0 50 29 1 #"\n"
0 0 50 3 7 #"      ("
0 0 50 3 7 #"reverse"
0 0 50 3 5 #" acc)"
0 0 50 29 1 #"\n"
0 0 50 3 7 #"      ("
0 0 50 3 4 #"let*"
0 0 50 3 9 #" ([pair ("
0 0 50 3 5 #"first"
0 0 50 3 10 #" arglist)]"
0 0 50 29 1 #"\n"
0 0 50 3 52 #"             [name  (s-exp->symbol (sx-ref pair 0))]"
0 0 50 29 1 #"\n"
0 0 50 3 47 #"             [expr (parse-sx (sx-ref pair 1))])"
0 0 50 29 1 #"\n"
0 0 50 3 21 #"        (parse-args ("
0 0 50 3 4 #"rest"
0 0 50 3 11 #" arglist) ("
0 0 50 3 4 #"cons"
0 0 50 3 2 #" ("
0 0 50 3 7 #"argpair"
0 0 50 3 19 #" name expr) acc))))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"; (S-Exp -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 11 #" (parse-sx "
0 0 49 3 2 #"sx"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 1 #"("
0 0 50 3 4 #"cond"
0 0 50 29 1 #"\n"
0 0 50 3 25 #"    [(s-exp-number? sx) ("
0 0 50 3 3 #"Num"
0 0 50 3 21 #" (s-exp->number sx))]"
0 0 50 29 1 #"\n"
0 0 50 3 25 #"    [(s-exp-symbol? sx) ("
0 0 50 3 2 #"Id"
0 0 50 3 21 #" (s-exp->symbol sx))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"("
0 0 50 3 4 #"with"
0 0 50 3 2 #" ("
0 0 50 3 6 #"SYMBOL"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 2 #") "
0 0 50 3 3 #"ANY"
0 0 50 3 5 #") sx)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"let*"
0 0 50 3 21 #" ([def (sx-ref sx 1)]"
0 0 50 29 1 #"\n"
0 0 50 3 47 #"            [id (s-exp->symbol (sx-ref def 0))]"
0 0 50 29 1 #"\n"
0 0 50 3 43 #"            [val (parse-sx (sx-ref def 1))]"
0 0 50 29 1 #"\n"
0 0 50 3 44 #"            [expr (parse-sx (sx-ref sx 2))])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 4 #"With"
0 0 50 3 15 #" id val expr))]"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"("
0 0 50 3 5 #"with*"
0 0 50 3 3 #" (("
0 0 50 3 6 #"SYMBOL"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 2 #") "
0 0 50 3 3 #"..."
0 0 50 3 2 #") "
0 0 50 3 3 #"ANY"
0 0 50 3 5 #") sx)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"let*"
0 0 50 3 55 #" ([defs (parse-args (s-exp->list (sx-ref sx 1)) empty)]"
0 0 50 29 1 #"\n"
0 0 50 3 44 #"            [expr (parse-sx (sx-ref sx 2))])"
0 0 50 29 1 #"\n"
0 0 50 3 8 #"       ("
0 0 50 3 5 #"With*"
0 0 50 3 13 #" defs expr))]"
0 0 50 29 1 #"\n"
0 0 50 29 1 #"\n"
0 0 50 3 19 #"    [(s-exp-match? "
0 0 50 3 1 #"`"
0 0 50 3 1 #"("
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 1 #" "
0 0 50 3 3 #"ANY"
0 0 50 3 5 #") sx)"
0 0 50 29 1 #"\n"
0 0 50 3 6 #"     ("
0 0 50 3 4 #"let*"
0 0 50 3 6 #" ([l ("
0 0 50 3 6 #"lambda"
0 0 50 3 30 #" () (parse-sx (sx-ref sx 1)))]"
0 0 50 29 1 #"\n"
0 0 50 3 16 #"            [r ("
0 0 50 3 6 #"lambda"
0 0 50 3 31 #" () (parse-sx (sx-ref sx 2)))])"
0 0 50 29 1 #"\n"
0 0 50 3 10 #"         ("
0 0 50 3 4 #"case"
0 0 50 3 30 #" (s-exp->symbol (sx-ref sx 0))"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"           [("
0 0 50 3 1 #"+"
0 0 50 3 3 #") ("
0 0 50 3 3 #"Add"
0 0 50 3 10 #" (l) (r))]"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"           [("
0 0 50 3 1 #"-"
0 0 50 3 3 #") ("
0 0 50 3 3 #"Sub"
0 0 50 3 10 #" (l) (r))]"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"           [("
0 0 50 3 1 #"*"
0 0 50 3 3 #") ("
0 0 50 3 3 #"Mul"
0 0 50 3 10 #" (l) (r))]"
0 0 50 29 1 #"\n"
0 0 50 3 13 #"           [("
0 0 50 3 1 #"/"
0 0 50 3 3 #") ("
0 0 50 3 3 #"Div"
0 0 50 3 10 #" (l) (r))]"
0 0 50 29 1 #"\n"
0 0 50 3 12 #"           ["
0 0 50 3 4 #"else"
0 0 50 3 21 #" (parse-error sx)]))]"
0 0 50 29 1 #"\n"
0 0 50 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 50 3 19 #" (parse-error sx)])"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 7 #"module+"
0 0 50 3 1 #" "
0 0 50 3 4 #"test"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 8 #"test/exn"
0 0 50 3 12 #"  (parse-sx "
0 0 50 3 1 #"`"
0 0 50 3 8 #"\"hi mom\""
0 0 50 3 16 #") \"parse error\")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 8 #"test/exn"
0 0 50 3 12 #"  (parse-sx "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 1 #"&"
0 0 50 3 1 #" "
0 0 50 3 1 #"1"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 17 #"}) \"parse error\")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 8 #"test/exn"
0 0 50 3 12 #"  (parse-sx "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"1"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 1 #" "
0 0 50 3 1 #"3"
0 0 50 3 17 #"}) \"parse error\")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 8 #"test/exn"
0 0 50 3 11 #" (parse-sx "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"with*"
0 0 50 3 3 #" {{"
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"1"
0 0 50 3 3 #"} {"
0 0 50 3 1 #"y"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 19 #"}}}) \"parse error\")"
0 0 50 29 1 #"\n"
0 0 50 3 3 #"  ("
0 0 50 3 4 #"test"
0 0 50 3 11 #" (parse-sx "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"with*"
0 0 50 3 3 #" {{"
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"1"
0 0 50 3 3 #"} {"
0 0 50 3 1 #"y"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 4 #"}} {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"y"
0 0 50 3 5 #"}}) ("
0 0 50 3 5 #"With*"
0 0 50 3 2 #" ("
0 0 50 3 4 #"list"
0 0 50 3 2 #" ("
0 0 50 3 7 #"argpair"
0 0 50 3 1 #" "
0 0 50 3 1 #"'"
0 0 50 3 1 #"x"
0 0 50 3 2 #" ("
0 0 50 3 3 #"Num"
0 0 50 3 4 #" 1))"
0 0 50 29 1 #"\n"
0 0 50 3 58
#"                                                         ("
0 0 50 3 7 #"argpair"
0 0 50 3 1 #" "
0 0 50 3 1 #"'"
0 0 50 3 1 #"y"
0 0 50 3 2 #" ("
0 0 50 3 3 #"Num"
0 0 50 3 5 #" 2)))"
0 0 50 29 1 #"\n"
0 0 50 3 58
#"                                                         ("
0 0 50 3 3 #"Add"
0 0 50 3 2 #" ("
0 0 50 3 2 #"Id"
0 0 50 3 1 #" "
0 0 50 3 1 #"'"
0 0 50 3 1 #"x"
0 0 50 3 3 #") ("
0 0 50 3 2 #"Id"
0 0 50 3 1 #" "
0 0 50 3 1 #"'"
0 0 50 3 6 #"y)))))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 16 #";; expr[to/from]"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"; (W*AE Symbol W*AE -> W*AE)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 8 #" (subst "
0 0 49 3 4 #"expr"
0 0 49 3 1 #" "
0 0 49 3 4 #"from"
0 0 49 3 1 #" "
0 0 49 3 2 #"to"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 5 #" expr"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Num"
0 0 49 3 9 #" n) expr]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Add"
0 0 49 3 7 #" l r) ("
0 0 49 3 3 #"Add"
0 0 49 3 38 #" (subst l from to) (subst r from to))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Sub"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 3 #"Sub"
0 0 50 3 37 #" (subst l from to) (subst r from to))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Mul"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 3 #"Mul"
0 0 50 3 37 #" (subst l from to) (subst r from to))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Div"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 1 #"("
0 0 50 3 3 #"Div"
0 0 50 3 37 #" (subst l from to) (subst r from to))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 2 #"Id"
0 0 49 3 8 #" name) ("
0 0 49 3 2 #"if"
0 0 49 3 26 #" (eq? name from) to expr)]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"With"
0 0 49 3 32 #" bound-id named-expr bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"           ("
0 0 49 3 4 #"With"
0 0 49 3 9 #" bound-id"
0 0 49 29 1 #"\n"
0 0 49 3 43 #"                 (subst named-expr from to)"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"                 ("
0 0 49 3 2 #"if"
0 0 49 3 20 #" (eq? bound-id from)"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                     bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 50 #"                     (subst bound-body from to)))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"With*"
0 0 49 3 20 #" arglist bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 2 #"if"
0 0 49 3 18 #" (empty? arglist) "
0 0 50 3 10 #"bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 7 #"ArgPair"
0 0 49 3 2 #" ("
0 0 49 3 5 #"first"
0 0 49 3 9 #" arglist)"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 7 #"argpair"
0 0 49 3 11 #" arg expr) "
0 0 49 3 27 #"; arg = symbol, expr = W*AE"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 5 #"With*"
0 0 49 3 2 #" ("
0 0 49 3 4 #"rest"
0 0 49 3 9 #" arglist)"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"               ("
0 0 49 3 4 #"With"
0 0 49 3 6 #" arg ("
0 0 49 3 2 #"if"
0 0 49 3 26 #" (eq? arg from) bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 60
#"                                (subst bound-body from to)) "
0 0 49 29 1 #"\n"
0 0 49 3 48 #"                     (subst expr arg to)))]))]))"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"#|"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"[("
0 0 49 3 5 #"With*"
0 0 49 3 1 #" "
0 0 49 3 8 #"arglist "
0 0 49 3 11 #"bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 2 #"if"
0 0 49 3 2 #" ("
0 0 49 3 6 #"empty?"
0 0 49 3 1 #" "
0 0 49 3 7 #"arglist"
0 0 49 3 12 #") bound-body"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 10 #"type-case "
0 0 49 3 7 #"ArgPair"
0 0 49 3 7 #" (first"
0 0 49 3 1 #" "
0 0 49 3 7 #"arglist"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 7 #"argpair"
0 0 49 3 1 #" "
0 0 49 3 3 #"arg"
0 0 49 3 1 #" "
0 0 49 3 6 #"expr) "
0 0 49 3 27 #"; arg = symbol, expr = W*AE"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 5 #"With*"
0 0 49 3 2 #" ("
0 0 49 3 3 #"map"
0 0 49 3 2 #" ("
0 0 49 3 6 #"lambda"
0 0 49 3 2 #" ("
0 0 49 3 11 #"arglistpair"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 23 #"                      ("
0 0 49 3 10 #"type-case "
0 0 49 3 7 #"ArgPair"
0 0 49 3 2 #" ("
0 0 49 3 11 #"arglistpair"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 34 #"                        [(argpair "
0 0 49 3 3 #"arg"
0 0 49 3 1 #" "
0 0 49 3 9 #"innerexpr"
0 0 49 3 3 #") ("
0 0 49 3 7 #"argpair"
0 0 49 3 1 #" "
0 0 49 3 3 #"arg"
0 0 49 3 2 #" ("
0 0 49 3 5 #"subst"
0 0 49 3 1 #" "
0 0 49 3 4 #"expr"
0 0 49 3 1 #" "
0 0 49 3 4 #"arg "
0 0 49 3 10 #"bound-body"
0 0 49 3 7 #"))])) ("
0 0 49 3 4 #"rest"
0 0 49 3 1 #" "
0 0 49 3 7 #"arglist"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"               ("
0 0 49 3 4 #"With"
0 0 49 3 1 #" "
0 0 49 3 3 #"arg"
0 0 49 3 1 #" "
0 0 49 29 1 #"\n"
0 0 49 3 22 #"                     ("
0 0 49 3 5 #"subst"
0 0 49 3 1 #" "
0 0 49 3 5 #"expr "
0 0 49 3 4 #"from"
0 0 49 3 1 #" "
0 0 49 3 2 #"to"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"                            ("
0 0 49 3 2 #"if"
0 0 49 3 5 #" (eq?"
0 0 49 3 1 #" "
0 0 49 3 3 #"arg"
0 0 49 3 1 #" "
0 0 49 3 4 #"from"
0 0 49 3 2 #") "
0 0 49 3 10 #"bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 38 #"                                (subst"
0 0 49 3 1 #" "
0 0 49 3 10 #"bound-body"
0 0 49 3 1 #" "
0 0 49 3 4 #"from"
0 0 49 3 1 #" "
0 0 49 3 10 #"to))))]))]"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"|#"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 47 #"#|(list (parse-args (map (lambda (id) (With* id"
0 0 49 29 1 #"\n"
0 0 49 3 24 #"                        "
0 0 49 3 32 #"              (subst id from to)"
0 0 49 29 1 #"\n"
0 0 49 3 55 #"                                      (if (eq? id from)"
0 0 49 29 1 #"\n"
0 0 49 3 52 #"                                          bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 98
(
 #"                                          (subst bound-body from to)"
 #"))) arglist) bound-body))]))|#"
) 0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 54 #";; evaluate a WAE program contained in an s-expression"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"; (S-Exp -> Number)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 6 #" (run "
0 0 49 3 2 #"sx"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 50 3 20 #"(eval (parse-sx sx))"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 28 #";; evaluates WAE expressions"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"; (W*AE -> Number)"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 7 #" (eval "
0 0 49 3 4 #"expr"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 4 #"W*AE"
0 0 49 3 5 #" expr"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Num"
0 0 49 3 6 #" n) n]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Add"
0 0 49 3 28 #" l r) (+ (eval l) (eval r))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Sub"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 21 #"(- (eval l) (eval r))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Mul"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 21 #"(* (eval l) (eval r))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 3 #"Div"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 21 #"(/ (eval l) (eval r))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"With"
0 0 49 3 32 #" bound-id named-expr bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"          (eval (subst bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 31 #"                       bound-id"
0 0 49 29 1 #"\n"
0 0 49 3 24 #"                       ("
0 0 49 3 3 #"Num"
0 0 49 3 23 #" (eval named-expr))))] "
0 0 49 3 7 #"; <-***"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 2 #"Id"
0 0 49 3 14 #" name) (error "
0 0 49 3 1 #"'"
0 0 49 3 4 #"eval"
0 0 49 3 55 #" (string-append \"free identifier: \" (to-string name)))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 5 #"With*"
0 0 49 3 20 #" arglist bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"     (eval ("
0 0 49 3 2 #"if"
0 0 49 3 17 #" (empty? arglist)"
0 0 49 29 1 #"\n"
0 0 49 3 25 #"               bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 16 #"               ("
0 0 49 3 9 #"type-case"
0 0 49 3 1 #" "
0 0 49 3 7 #"ArgPair"
0 0 49 3 2 #" ("
0 0 49 3 5 #"first"
0 0 49 3 9 #" arglist)"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"                 [("
0 0 49 3 7 #"argpair"
0 0 49 3 10 #" arg expr)"
0 0 49 29 1 #"\n"
0 0 49 3 19 #"                  ("
0 0 49 3 5 #"With*"
0 0 49 3 2 #" ("
0 0 49 3 4 #"rest"
0 0 49 3 9 #" arglist)"
0 0 49 29 1 #"\n"
0 0 49 3 26 #"                         ("
0 0 49 3 3 #"Num"
0 0 49 3 44 #" (eval (subst bound-body arg expr))))])))]))"
0 0 49 29 1 #"\n"
0 0 49 3 14 #";(trace subst)"
0 0 49 29 1 #"\n"
0 0 49 3 13 #";(trace eval)"
0 0 49 29 1 #"\n"
0 0 49 3 8 #";; tests"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 7 #"module+"
0 0 49 3 1 #" "
0 0 49 3 4 #"test"
0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 3 1 #"#"
0 0 49 3 1 #"|"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 2 #"`5"
0 0 49 3 2 #") "
0 0 49 3 1 #"5"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"}) "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"}) "
0 0 49 3 2 #"25"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 1 #"/"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"}) "
0 0 49 3 1 #"1"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 4 #"}} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}) "
0 0 49 3 2 #"20"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}) "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"*"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}) "
0 0 49 3 2 #"25"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"/"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}) "
0 0 49 3 1 #"1"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 4 #"}} {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"y"
0 0 49 3 2 #" {"
0 0 49 3 1 #"-"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 4 #"}} {"
0 0 49 3 1 #"+"
0 0 49 3 2 #" y"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 5 #"}}}) "
0 0 49 3 2 #"14"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"y"
0 0 49 3 2 #" {"
0 0 49 3 1 #"-"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 4 #"}} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 1 #" "
0 0 49 3 1 #"y"
0 0 49 3 5 #"}}}) "
0 0 49 3 1 #"4"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 2 #"} "
0 0 49 3 2 #"10"
0 0 49 3 5 #"}}}) "
0 0 49 3 2 #"15"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 2 #"} "
0 0 49 3 1 #"x"
0 0 49 3 5 #"}}}) "
0 0 49 3 1 #"8"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #" {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"y"
0 0 49 3 1 #" "
0 0 49 3 1 #"3"
0 0 49 3 2 #"} "
0 0 49 3 1 #"x"
0 0 49 3 5 #"}}}) "
0 0 49 3 2 #"10"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"y"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"y"
0 0 49 3 4 #"}}) "
0 0 49 3 1 #"5"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 2 #" ("
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #"`"
0 0 49 3 1 #"{"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"5"
0 0 49 3 3 #"} {"
0 0 49 3 4 #"with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"x"
0 0 49 3 2 #"} "
0 0 49 3 1 #"x"
0 0 49 3 4 #"}}) "
0 0 49 3 1 #"5"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 54 #"  (test/exn (run `{with {x 1} y}) \"free identifier\")|#"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 1 #" "
0 0 50 3 5 #"(run "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"with*"
0 0 50 3 3 #" {{"
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"1"
0 0 50 3 3 #"} {"
0 0 50 3 1 #"y"
0 0 50 3 1 #" "
0 0 50 3 1 #"2"
0 0 50 3 4 #"}} {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 4 #"y}})"
0 0 49 3 1 #" "
0 0 50 3 1 #"3"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 1 #" "
0 0 50 3 5 #"(run "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"with*"
0 0 50 3 3 #" {{"
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"5"
0 0 50 3 1 #"}"
0 0 50 29 1 #"\n"
0 0 50 3 23 #"                      {"
0 0 50 3 1 #"y"
0 0 50 3 2 #" {"
0 0 50 3 1 #"-"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"3"
0 0 50 3 5 #"}}} {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"y"
0 0 50 3 1 #" "
0 0 50 3 4 #"y}})"
0 0 49 3 2 #"  "
0 0 50 3 1 #"4"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"test"
0 0 49 3 1 #" "
0 0 50 3 5 #"(run "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"with*"
0 0 50 3 3 #" {{"
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"5"
0 0 50 3 1 #"}"
0 0 50 29 1 #"\n"
0 0 50 3 23 #"                      {"
0 0 50 3 1 #"y"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 3 #"}} "
0 0 50 3 3 #"y})"
0 0 49 3 1 #" "
0 0 50 3 1 #"5"
0 0 49 3 2 #"))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 19 #" minutes-spent 180)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 2 #";;"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 4 #" a ("
0 0 49 3 5 #"With*"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 7 #"argpair"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 3 #"Num"
0 0 49 3 6 #" 1)) ("
0 0 49 3 7 #"argpair"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 2 #" ("
0 0 49 3 3 #"Num"
0 0 49 3 7 #" 2))) ("
0 0 49 3 3 #"Add"
0 0 49 3 2 #" ("
0 0 49 3 2 #"Id"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 3 #") ("
0 0 49 3 2 #"Id"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 5 #")))) "
0 0 49 3 9 #"; => W*AE"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 4 #" b ("
0 0 49 3 3 #"map"
0 0 49 3 2 #" ("
0 0 49 3 2 #"\316\273"
0 0 49 3 2 #" ("
0 0 49 3 4 #"item"
0 0 49 3 25 #") (symbol->s-exp item)) ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 4 #"))) "
0 0 49 3 17 #"; => listof s-exp"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 4 #" c ("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 3 #")) "
0 0 49 3 18 #"; => listof symbol"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 4 #" d ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 7 #"argpair"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"y"
0 0 49 3 2 #" ("
0 0 49 3 3 #"Num"
0 0 49 3 6 #" 2)) ("
0 0 49 3 7 #"argpair"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"x"
0 0 49 3 2 #" ("
0 0 49 3 3 #"Num"
0 0 49 3 7 #" 1)))) "
0 0 49 3 18 #"; =>listof argpair"
0 0 49 29 1 #"\n"
0 0 49 3 60
#";(define e (parse-args b d)) ; => not working listof argpair"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 4 #" f ("
0 0 49 3 5 #"With*"
0 0 49 3 7 #" d a)) "
0 0 49 3 9 #"; => W*AE"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 13 #" g (subst f ("
0 0 49 3 5 #"first"
0 0 49 3 8 #" c) f)) "
0 0 49 3 9 #"; => W*AE"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 13 #" h (eval g)) "
0 0 49 3 6 #"; => 3"
0 0 49 29 1 #"\n"
0 0 50 3 1 #"("
0 0 50 3 6 #"define"
0 0 50 3 8 #" i (run "
0 0 50 3 1 #"`"
0 0 50 3 1 #"{"
0 0 50 3 5 #"with*"
0 0 50 3 3 #" {{"
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"5"
0 0 50 3 3 #"} {"
0 0 50 3 1 #"y"
0 0 50 3 2 #" {"
0 0 50 3 1 #"-"
0 0 50 3 1 #" "
0 0 50 3 1 #"x"
0 0 50 3 1 #" "
0 0 50 3 1 #"3"
0 0 50 3 5 #"}}} {"
0 0 50 3 1 #"+"
0 0 50 3 1 #" "
0 0 50 3 1 #"y"
0 0 50 3 1 #" "
0 0 50 3 5 #"y}}))"
0 0 49 3 1 #" "
0 0 49 3 6 #"; => 4"
0 0 49 29 1 #"\n"
0 0 49 3 2 #";;"
0           0
